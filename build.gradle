import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.adarshr.test-logger' version '4.0.0'
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.hidetake.swagger.generator' version '2.18.2'

}

group = 'com.timeToast'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}

openapi3 {
	servers = [
			{ url = 'https://timetoast.app' }
	]
	title = 'TimeToast API 문서'
	description = 'TimeToast API Docs'
	version = '1.0.0'
	format = 'yaml'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	//actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//queryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation "com.querydsl:querydsl-codegen:5.0.0" // QueryDSL 코드 생성
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	//Jakarta 설정 어노테이션에 사용된다.
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//restDocs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//openAPI3
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion

	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	//swagger
	swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

testlogger {
	slowThreshold 0
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
									  "  - APIKey: []  # Apply the security scheme here"

		swaggerUIFile.append securitySchemesContent
	}
}


bootJar {
	dependsOn generateSwaggerUISample
	from("${generateSwaggerUISample.outputDir}") {
		into 'static/docs'
	}
}

jar.enabled = false
