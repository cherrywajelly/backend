import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.adarshr.test-logger' version '4.0.0'
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.hidetake.swagger.generator' version '2.18.2'
	id 'jacoco'

}

group = 'com.timeToast'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.12"
	reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	def QDomainList = []
	for (qPattern in '**/QA'..'**/QZ') { // QClass 대응
		QDomainList.add(qPattern + '*')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/dto/**',
					'**/domain/**',
					'**/global/**',
					'**/repository/**',
					'**/service/member/oauth/**',
					'com/timeToast/timeToast/TimeToastApplication.class'
			] + QDomainList)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def QDomainList = []
	for (qPattern in '*.QA'..'*.QZ') { // QClass 대응
		QDomainList.add(qPattern + '*')
	}


	violationRules{
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.6
			}

			excludes =  [
					'*.dto.*',
					'*.domain.*',
					'*.global.*',
					'*.repository.*',
					'*.service.member.oauth.*',
					'*.TimeToastApplication'
			] + QDomainList
		}

	}
}

openapi3 {
	servers = [
			{ url = 'https://dev-back.timetoast.app' },
			{ url = 'http://localhost:8080' }
	]
	title = 'TimeToast API 문서'
	description = 'TimeToast API Docs'
	version = '0.0.1'
	format = 'json'
	outputDirectory = 'build/resources/main/static/docs'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'

	//tunelling
	implementation 'com.jcraft:jsch:0.1.55'

	//mysql
	runtimeOnly 'com.mysql:mysql-connector-j'

	// MySQL
	runtimeOnly 'com.mysql:mysql-connector-j'

	//actuator
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//queryDsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation "com.querydsl:querydsl-codegen:5.0.0" // QueryDSL 코드 생성
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	//Jakarta 설정 어노테이션에 사용된다.
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//restDocs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	//openAPI3
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:' + restdocsApiSpecVersion

	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	//swagger
	swaggerUI 'org.webjars:swagger-ui:4.11.1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'


	//testcontainers
	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
	testImplementation "org.testcontainers:testcontainers:1.20.3"
	testImplementation "org.testcontainers:junit-jupiter:1.20.3"
	testImplementation "org.testcontainers:mysql:1.20.3"


	// oci
	implementation 'com.oracle.oci.sdk:oci-java-sdk-common:2.8.1'
	implementation 'com.oracle.oci.sdk:oci-java-sdk-objectstorage:2.8.1'
	implementation 'javax.ws.rs:javax.ws.rs-api:2.1'

	implementation 'org.glassfish.jersey.core:jersey-client:2.34'
	implementation 'org.glassfish.jersey.core:jersey-common:2.34'
	implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.34'
	implementation 'org.glassfish.jersey.ext:jersey-entity-filtering:2.34'
	implementation 'org.glassfish.jersey.inject:jersey-hk2:2.34'
	implementation 'org.glassfish.jersey.connectors:jersey-apache-connector:2.34'

	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	//firbase
	implementation 'com.google.firebase:firebase-admin:9.2.0'


	//integrate test

}

tasks.named('test') {
	useJUnitPlatform()
	dependsOn 'createOutputDirectory'
	finalizedBy jacocoTestReport, 'openapi3'

	jacoco {
		excludes += ['*.dto.*',
					 '*.domain.*',
					 '*.global.*',
					 '*.repository.*',
					 '*.service.member.oauth.*',
					 '*.TimeToastApplication']
	}

}

testlogger {
	slowThreshold 0
}

task createOutputDirectory {
	doFirst {
		delete file('src/main/resources/static/docs/')
		file(openapi3.outputDirectory).mkdirs()
		file('src/main/resources/static/docs/').mkdirs()
	}
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	doLast {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.json")

		def securitySchemesContent = "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
				"  - APIKey: []"

		swaggerUIFile.append securitySchemesContent

		copy {
			from file("build/resources/main/static/docs/openapi3.json")
			into "src/main/resources/static/docs/"
		}
	}


}

bootJar {
//	dependsOn 'createOutputDirectory', ':openapi3'
	from("${openapi3.outputDirectory}") {
		into 'static/docs'
	}
}

jar.enabled = false
